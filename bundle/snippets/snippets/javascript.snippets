# Prototype
snippet proto
	${1:class_name}.prototype.${2:method_name} =
	function(${3:first_argument}) {
		${0:// body...}
	};
# Function
snippet fun
	function ${1:function_name}(${2:argument}) {
		${0:// body...}
	}
# Anonymous Function
snippet f
	function (${1}) {
		${0}
	}${2:;}
# Immediate function
snippet (f
	(function (${1}) {
		${0}
	}(${2}));
# if
snippet if
	if (${1:true}) {
		${0}
	}
# if ... else
snippet ife
	if (${1:true}) {
		${2}
	} else {
		${0}
	}
# tertiary conditional
snippet ter
	${1:/* condition */} ? ${2:a} : ${0:b}
# switch
snippet switch
	switch (${1:expression}) {
		case '${3:case}':
			${4}
			break;
		${0}
		default:
			${2}
	}
# case
snippet case
	case '${1:case}':
		${2}
		break;
	${0}
# for (...) {...}
snippet for
	for (var ${2:i} = 0, l = ${1:arr}.length; $2 < l; $2 ++) {
		var ${3:v} = $1[$2];${0:}
	}
# for (...) {...} (Improved Native For-Loop)
snippet forr
	for (var ${2:i} = ${1:arr}.length - 1; $2 >= 0; $2 --) {
		var ${3:v} = $1[$2];${0:}
	}
# while (...) {...}
snippet wh
	while (${1:/* condition */}) {
		${0}
	}
# try
snippet try
	try {
		${1}
	} catch (${2:e}) {
		${0:/* handle error */}
	}
# do...while
snippet do
	do {
		${0}
	} while (${1:/* condition */});
# Object Method
snippet :f
	${1:method_name}: function (${2:attribute}) {
		${0}
	}${3:,}
# setTimeout function
snippet timeout
	setTimeout(function () {${0}}${2}, ${1:10});
# Get Elements
snippet get
	getElementsBy${1:TagName}('${2}')
# Get Element
snippet gett
	getElementBy${1:Id}('${2}')
# console.log (Firebug)
snippet cl
	console.log(${0});
# return
snippet cw
	console.warn(${0});
snippet ret
	return ${0:result}
# for (property in object ) { ... }
snippet fori
	for (var ${1:prop} in ${2:Things}) {
		${0:$2[$1]}
	}
# hasOwnProperty
snippet has
	hasOwnProperty(${0})
# docstring
snippet /**
	/**
	 * ${0:description}
	 *
	 */
snippet @par
	@param {${1:type}} ${2:name} ${0:description}
snippet @ret
	@return {${1:type}} ${0:description}
# JSON.parse
snippet jsonp
	JSON.parse(${0:jstr});
# JSON.stringify
snippet jsons
	JSON.stringify(${0:object});
# self-defining function
snippet sdf
	var ${1:function_name} = function (${2:argument}) {
		${3}

		$1 = function ($2) {
			${0}
		};
	};
# singleton
snippet sing
	function ${1:Singleton} (${2:argument}) {
		// the cached instance
		var instance;

		// rewrite the constructor
		$1 = function $1($2) {
			return instance;
		};

		// carry over the prototype properties
		$1.prototype = this;

		// the instance
		instance = new $1();

		// reset the constructor pointer
		instance.constructor = $1;

		${0}

		return instance;
	}
# Crockford's object function
snippet obj
	function object(o) {
		function F() {}
		F.prototype = o;
		return new F();
	}


#React snippet
snippet cx
	cx({
		${1}: ${2}
	});
snippet gdp
	getDefaultProps() {
		return {
			${1}
		};
	}
snippet ism
	isMounted()
snippet ppt
	${1:Class}.propTypes = {
		${2:prop}: PropTypes.${3:object}.isRequired,
	}
snippet scc
	import React, { PropTypes } from 'react'
	import StyledComponent from './style'

	export function ${1:Layout} (props) {
		const { ${2:props} } = props
		return (
			<StyledComponent ${3:data}>
				<${4:div}>

				</$4>
			</StyledComponent>
		)
	}

	export default function my$1 (props) {
		return <$1 />
	}
snippet scss
	import React, { PropTypes } from 'react'
	import styled from 'styled-components'

	const StyledComponent = styled.${1:div}
		display: block;

		@media(min-width: 576px){

		}

		@media(min-width: 768px){

		}

		@media(min-width: 992px){

		}

		@media(min-width: 1200px){

		}
	${2}
	export default function ${3:MyComponent} (props) {
		return (
			<StyledComponent>
				{props.children}
			</StyledComponent>
		)
	}

snippet render
	return (
		<${1:div}>
			${2}
		</${3:$1}>
	);
snippet cont
	import React from 'react'

	import Component from 'components/Component'
	
	/**
	 * ${3:$1}
	 * @component
	 * 
	 */
	function ${1:Elem} (props) {
		return(
			<Component>

			</Component>
		)
	}

	export default $1
snippet comp
	import React from 'react'
	import PropTypes from 'prop-types'
	import styled from 'styled-components'
	
	/**
	 * Styled${8:$1}
	 * @component
	 */
	const Styled${5:$1} = styled.div
	  width: 100px
	
	/**
	 * ${3:$1}
	 * @component
	 * 
	 */
	function ${1:Elem} (props) {
		const {children, className, ...rest} = props
		return(
			<Styled${6:$1} className={className} {...rest}>{children}</Styled${7:$1}>
		)
	}
	${2: $1}.defaultProps = {
		children: undefined,
		className: '',
	}
	$2.propTypes = {
		children: PropTypes.node,
		className: PropTypes.string
	}
	
	export default $1
snippet comps
	import React from 'react'
	import PropTypes from 'prop-types'

	import Wrapper from '~components/Wrapper'
	
	/**
	 * ${3:$1}
	 * @component
	 * 
	 */
	function ${1:Elem} (props) {
		const {children, ...rest} = props
		return(
			<Wrapper {...rest} customStyle={{
				display: 'flex',
			}}>
				{children}
			</Wrapper>
		)
	}
	${2: $1}.defaultProps = {
		children: undefined	
	}
	$2.propTypes = {
		children: PropTypes.node
	}
	
	export default $1
snippet style
	import styled from 'styled-components';
	import Wrapper from '~components/Wrapper';
	
	/**
	 * $1
	 * @component 
	 *
	*/
	const ${1:elem} = styled(Wrapper)${2:TTT}
	  display: flex;
	  flex-direction: column;
	${3:$2} ;
	
	export default $1;
snippet context
	import React from 'react';

	const ${1:elem}Context = React.createContext();

	/**
	 * $1Provider
	 * @component
	 * @context
	 *
	 */
	function $1Provider(props) {
		const value = {
			
		};

		return <$1Context.Provider {...props} value={value} />;
	}
	
	/**
	 * use$1
	 * @return context
	 *
	 */
	export const use$1 = () => {
		const context = React.useContext($1Context);
		if (!context)
			throw new Error('$1Context must be called in $1Provider');
		return context;
	};
	export default $1Provider;
snippet test 
	import React from 'react'
	import { shallow } from 'enzyme'
	import Contexts from '~contexts'
	import ${1:Component} from './index'

	const shallowWrapper = shallow(
	  <Contexts>
		<$1  />
	  </Contexts>,
	)

	const mockSetState = jest.fn()

	jest.mock('react', () => ({
	  ...jest.requireActual('react'),
	  useState: (initial) => [initial, mockSetState],
	  useEffect: jest.fn(),
	}))

	describe('render', () => {
	  const wrapper = shallowWrapper.find($1)
	  it('$1 must be rendered', () => {
		expect(wrapper).toBeDefined()
	  })
	})
snippet container
	import React from 'react'
	import { useTranslation } from 'react-i18next'
	import Wrapper from '~components/Wrapper'
	
	
	/**
	 * ${2:$1}Container
	 * @container
	 * 
	 */
	function ${1:Component}Container () {
		const {t} = useTranslation()
		return(
			<Wrapper>
				content
			</Wrapper>
		)
	}
	
	export default $1Container
snippet cte
	import constants from '~utils/constants'
	
	const {${1:PATHS}} = constants
snippet ppt
	import PropTypes from 'prop-types'
snippet Link
	<Link to={${2:#}}>${1:link}</Link>
snippet Btn
	<Button className="">${1:Btm}</Button>
snippet Wrapper
	<Wrapper className="">${1:Txt}</Wrapper>
snippet Input
	<Input className="">${1:Txt}</Input>
snippet Inputf
	<InputField className="">${1:Txt}</InputField>
